keycloak:
  enabled: false
registration:
  enabled: false



# -- configuration for apisix to be deployed as part of the connector, see https://github.com/bitnami/charts/tree/main/bitnami/apisix for all options
apisix:
  # -- configuration in regard to the apisix control plane
  image:
    debug: true
  dashboard:
    # -- should it be enabled
    enabled: true
    resourcesPreset: micro
    username: deployemds
    password: deployemds
    ingress:
      enabled: true
      hostname: apisix-dashboard${partner_suffix}.demo-portal.eu
      ingressClassName: "nginx"      
      #annotations:
        #cert-manager.io/cluster-issuer: "letsencrypt-staging"
      #tls:
      #  - hosts: 
      #    - apisix-dashboard${partner_suffix}.demo-portal.eu
      #    secretName: apisix-dashboard-provider-tls      
  controlPlane:
    enabled: true
    resourcesPreset: micro
    apiTokenAdmin: 9Bn1Qme3CNajoHR2QKeGPoU7TmeOcOFO
    tls: 
      enabled: false
    ingress:
      enabled: true
      hostname: apisix-control${partner_suffix}.demo-portal.eu
      ingressClassName: "nginx"      
      #annotations:
        #cert-manager.io/cluster-issuer: "letsencrypt-staging"
      #tls:
      #  - hosts: 
      #    - apisix-control${partner_suffix}.demo-portal.eu
      #    secretName: apisix-control-provider-tls      
  # -- configuration in regard to the apisix dataplane
  dataPlane:
    # -- resources config to be set
    enabled: true
    resourcesPreset: micro
    ingress:
      enabled: true
      hostname: deployemds-data-service${partner_suffix}.demo-portal.eu
      ingressClassName: "nginx"      
      #annotations:
        #cert-manager.io/cluster-issuer: "letsencrypt-staging"
      #tls:
      #  - hosts: 
      #    - deployemds-data-service${partner_suffix}.demo-portal.eu
      #    secretName: deployemds-data-service-provider-tls      
      extraHosts:
        - name: deployemds-tmf-api${partner_suffix}.demo-portal.eu
          path: /
    # -- configuration for extra configmaps to be deployed
    extraConfig:
      deployment:
        # -- allows to configure apisix through a yaml file
        role_data_plane:
          config_provider: etcd
          #config_provider: yaml
  # -- configuration of a catchAll-route(e.g. /*)
  catchAllRoute:
    # -- should it be enabled
    enabled: false
  # -- configuration of routes for apisix
  routes: |-
  
    - uri: /.well-known/openid-configuration
      host: deployemds-data-service${partner_suffix}.demo-portal.eu
      upstream:
        nodes:
          verifier:3000: 1
        type: roundrobin
      plugins:
        proxy-rewrite:
          uri: /services/data-service/.well-known/openid-configuration

    - uri: /.well-known/data-space-configuration
      host: deployemds-data-service${partner_suffix}.demo-portal.eu
      upstream:
        nodes:
          dataSpaceConfig:3002: 1
        type: roundrobin
      plugins:
        proxy-rewrite:
          uri: /.well-known/data-space-configuration/data-space-configuration.json
        response-rewrite:
          headers:
            set:
              content-type: application/json
              
    - uri: /ngsi-ld/*
      host: deployemds-data-service${partner_suffix}.demo-portal.eu
      upstream:
        nodes:
          data-service-scorpio:9090: 1
        type: roundrobin
      plugins:
        openid-connect:
          bearer_only: true
          use_jwks: true
          client_id: data-service
          client_secret: unused
          ssl_verify: false
          discovery: http://verifier:3000/services/data-service/.well-known/openid-configuration
        opa:
          host: "http://localhost:8181"
          policy: policy/main
          with_body: true

    - uri: /.well-known/openid-configuration
      host: deployemds-tmf-api${partner_suffix}.demo-portal.eu
      upstream:
        nodes:
          verifier:3000: 1
        type: roundrobin
      plugins:
        proxy-rewrite:
          uri: /services/tmf-api/.well-known/openid-configuration
          
    - uri: /*
      host: deployemds-tmf-api${partner_suffix}.demo-portal.eu
      upstream:
        nodes:
          tm-forum-api:8080: 1
        type: roundrobin
      plugins:
        openid-connect:
          bearer_only: true
          use_jwks: true
          client_id: contract-management
          client_secret: unused
          ssl_verify: false
          discovery: http://verifier:3000/services/tmf-api/.well-known/openid-configuration
        opa:
          host: "http://localhost:8181"
          policy: policy/main
          with_body: true


# -- configuration for the contract-management to be deployed as part of the connector, see https://github.com/FIWARE/helm-charts/tree/main/charts/contract-management for all options         
contract-management:
  til:
    credentialType: OperatorCredential
    claims:
    ## DID of the target service that is requiring the permissions
    - target: "did:data:service"
      ## Roles that are added/allowed for the given service
      roles:
        - Consumer
        - Admin
        - Operator



# -- configuration for the credentials-config-service to be deployed as part of the connector, see https://github.com/FIWARE/helm-charts/tree/main/charts/credentials-config-service for all options
credentials-config-service:
  ingress:
    enabled: true
    hosts:
      - host: ccs${partner_suffix}.demo-portal.eu
        paths:
          - "/"
    annotations:
      kubernetes.io/ingress.class: "nginx"
      #cert-manager.io/cluster-issuer: "letsencrypt-staging"
    #tls:
    #  - hosts: 
    #    - ccs${partner_suffix}.demo-portal.eu
    #    secretName: ccs-provider-tls



dataSpaceConfig:
  enabled: true
  serviceType: ClusterIP
  port: 3002
  supportedModels:
    - "https://raw.githubusercontent.com/smart-data-models/dataModel.Consumption/master/ConsumptionPoint/schema.json"
    - "https://raw.githubusercontent.com/smart-data-models/dataModel.Consumption/master/ConsumptionCost/schema.json"
  supportedProtocols:
    - http
    - https
  authenticationProtocols:
    - oid4vp



# -- configuration for the did-helper, should only be used for demonstrational deployments, see https://github.com/wistefan/did-helper
did:
  enabled: true
  secret: issuance-secret
  serviceType: ClusterIP
  port: 3000
  cert:
    country: DE
    state: SAXONY
    locality: Dresden
    organization: M&P Operations Inc.
    commonName: www.mp-operation.org
  ingress:
    enabled: true
    host: did-helper-provider${partner_suffix}.demo-portal.eu


    
mysql:
  primary:
    persistence:
      enabled: false
  secondary:
    persistence:
      enabled: false



# -- configuration for the odrl-pap to be deployed as part of the connector, see https://github.com/FIWARE/helm-charts/tree/main/charts/odrl-pap for all options
odrl-pap:
  # -- configuration about the image to be used
  deployment:
    image:
      pullPolicy: Always
    initContainers:
      - name: get-did
        image: ubuntu
        command:
          - /bin/bash
        args:
          - -ec
          - |
            #!/bin/bash
            apt-get -y update; apt-get -y install wget
            cd /did-material
            wget http://did-helper:3000/did-material/did.env
        volumeMounts:
          - name: did-material
            mountPath: /did-material
    additionalVolumes:
      - name: did-material
        emptyDir: {}
    additionalVolumeMounts:
      - name: did-material
        mountPath: /did-material
    command:
      - /bin/sh
    args:
      - -ec
      - |
        #!/bin/sh
        source /did-material/did.env
        export GENERAL_ORGANIZATION_DID=$DID
        ./application -Dquarkus.http.host=0.0.0.0
  ingress:
    enabled: true
    hosts:
      - host: odrl-pap${partner_suffix}.demo-portal.eu
        paths:
          - "/"
    annotations:
      kubernetes.io/ingress.class: "nginx"
      #cert-manager.io/cluster-issuer: "letsencrypt-staging"
    #tls:
    #  - hosts: 
    #    - odrl-pap${partner_suffix}.demo-portal.eu
    #    secretName: odrl-pap-provider-tls
  ## configuration to provide additional mappings from odrl to rego
  additionalMapping:
    # -- should an additional mapping.json be loaded
    enabled: false
    # -- mapping.json to merged with the defaults
    # the example would overwrite the default odrl:use to be handled by a custom rego method provided with the additional rego 
    json: |
      {
        "action": {
          "odrl": {
            "use" : {
              "regoPackage": "custom.action as custom_action",
              "regoMethod": "custom_action.is_use(helper.http_part)"
            }
          }
        }
      }
  ## configuration to provide additonal rego packages
  additionalRego:
    # -- should additional packages be loaded
    enabled: false
    packages: |
      custom/action.rego: |
        package odrl.action  
  
        import rego.v1

        ## odrl:use
        # checks if the given request is a usage - in constrast to the default, this example would only consider modifications a "use"
        is_use(request) if {
            methods := ["POST", "PUT", "PATCH"]
            request.method in methods
        }
        
        

postgis:
  primary:
    persistence:
      enabled: false
  readReplicas:
    persistence:
      enabled: false



postgresql:
  primary:
    persistence:
      enabled: false
  readReplicas:
    persistence:
      enabled: false



## configuration of the context-broker - see https://github.com/FIWARE/helm-charts/tree/main/charts/scorpio-broker-aaio for details
scorpio:
  ingress:
    enabled: true
    # only to make it available for the test initialization
    hosts:
      - host: scorpio-direct${partner_suffix}.demo-portal.eu
        paths:
          - "/"
    annotations:
      kubernetes.io/ingress.class: "nginx"
      #cert-manager.io/cluster-issuer: "letsencrypt-staging"
    #tls:
    #  - hosts: 
    #    - scorpio-direct${partner_suffix}.demo-portal.eu
    #    secretName: scorpio-provider-tls
  ccs:
    # -- default scope to be created for the data plane
    defaultOidcScope:
      # -- name of the scope
      name: default      
    oidcScopes:
      default:
        - type: UserCredential
          trustedParticipantsLists:
            - http://tir.trust-anchor.svc.cluster.local:8080
          trustedIssuersLists:
            - http://trusted-issuers-list:8080
      operator:
        - type: OperatorCredential
          trustedParticipantsLists:
            - http://tir.trust-anchor.svc.cluster.local:8080
          trustedIssuersLists:
            - http://trusted-issuers-list:8080



tm-forum-api:
  registration:
    ccs:
      defaultOidcScope:
        credentialType: UserCredential
        trustedParticipantsLists: http://tir.trust-anchor.svc.cluster.local:8080
  ingress:
    enabled: true
    hosts:
      - host: tmf-api-direct${partner_suffix}.demo-portal.eu
        paths:
          - "/"
    annotations:
      kubernetes.io/ingress.class: "nginx"
      #cert-manager.io/cluster-issuer: "letsencrypt-staging"
    #tls:
    #  - hosts: 
    #    - deployemds-tmf-api${partner_suffix}.demo-portal.eu
    #    secretName: odrl-pap-provider-tls
  ## configuration to provide additional mappings from odrl to rego



trusted-issuers-list:
  # only open for clean up in the tests
  ingress:
    til:
      enabled: true
      annotations:
        kubernetes.io/ingress.class: "nginx"
      hosts:
        - host: til-provider${partner_suffix}.demo-portal.eu
      #cert-manager.io/cluster-issuer: "letsencrypt-staging"
      #tls:
      #  - hosts: 
      #    - til-provider${partner_suffix}.demo-portal.eu
      #    secretName: til-provider-provider-tls            
    tir:
      # -- tir: Providing path /v4/issuers for methods GET, HEAD
      # -- https://github.com/fiware/trusted-issuers-list
      # -- https://github.com/FIWARE/helm-charts/blob/main/charts/trusted-issuers-list/templates/ingress-tir.yaml
      # -- Test in browser: http://your-tir-ingresshost/v4/issuers
      enabled: true
      annotations:
        kubernetes.io/ingress.class: "nginx"
      #  cert-manager.io/cluster-issuer: "letsencrypt-staging"
      hosts:
        - host: tir-provider${partner_suffix}.demo-portal.eu
      #tls:
      #  - hosts: 
      #    - tir-ta${partner_suffix}.demo-portal.eu
      #    secretName: tir-ta-tls-secret





# -- configuration for the vcverifier to be deployed as part of the connector, see https://github.com/FIWARE/helm-charts/tree/main/charts/vcverifier for all options
vcverifier:
  ingress:
    enabled: true
    hosts:
      - host: verifier${partner_suffix}.demo-portal.eu
        paths:
          - "/"
    annotations:
      kubernetes.io/ingress.class: "nginx"
      #cert-manager.io/cluster-issuer: "letsencrypt-staging"
    #tls:
    #  - hosts: 
    #    - verifier${partner_suffix}.demo-portal.eu
    #    secretName: verifier-provider-tls
  deployment:
    logging:
      level: DEBUG
    verifier:
      tirAddress: http://tir.trust-anchor.svc.cluster.local:8080
      did: did:key:zDnaecDCWgeitzMX55oNoVneg3uN6AyesyTpfKSb6AU53Yb6Y
    server:
      host: http://verifier${partner_suffix}.demo-portal.eu
    configRepo:
      configEndpoint: http://credentials-config-service:8080
    alternativeConfig: /alternative-conf/server.yaml
    additionalVolumes:
      - name: did-material
        emptyDir: {}
      - name: alternative-conf
        emptyDir: {}
    additionalVolumeMounts:
      - name: alternative-conf
        mountPath: /alternative-conf
    initContainers:
      - name: get-did
        image: ubuntu
        command:
          - /bin/bash
        args:
          - -ec
          - |
            #!/bin/bash
            apt-get -y update; apt-get -y install wget; apt-get -y install gettext-base
            cd /did-material
            wget http://did-helper:3000/did-material/did.env
            export $(cat /did-material/did.env)
            cp /original-conf/server.yaml /alternative-conf/server.yaml
            envsubst < /alternative-conf/server.yaml
        volumeMounts:
          - name: did-material
            mountPath: /did-material
          - name: config-volume
            mountPath: /original-conf
          - name: alternative-conf
            mountPath: /alternative-conf

      # register the issuer at the trusted issuers registry - will only work if that one is publicly accessible
      - name: register-at-tir
        image: ubuntu
        command:
          - /bin/bash
        args:
          - -ec
          - |
            #!/bin/bash
            source /did-material/did.env
            apt-get -y update; apt-get -y install curl
            curl -X 'POST' 'http://tir.trust-anchor.svc.cluster.local:8080/issuer' -H 'Content-Type: application/json' -d "{\"did\": \"${DID}\", \"credentials\": []}"
        volumeMounts:
          - name: did-material
            mountPath: /did-material